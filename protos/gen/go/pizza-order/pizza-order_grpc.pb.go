// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: pizza-order/pizza-order.proto

package pizza_orderv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	POrder_PlaceOrder_FullMethodName       = "/pizza_order.POrder/PlaceOrder"
	POrder_CheckOrderStatus_FullMethodName = "/pizza_order.POrder/CheckOrderStatus"
	POrder_CancelOrder_FullMethodName      = "/pizza_order.POrder/CancelOrder"
)

// POrderClient is the client API for POrder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type POrderClient interface {
	PlaceOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	CheckOrderStatus(ctx context.Context, in *OrderStatusRequest, opts ...grpc.CallOption) (*OrderStatusResponse, error)
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error)
}

type pOrderClient struct {
	cc grpc.ClientConnInterface
}

func NewPOrderClient(cc grpc.ClientConnInterface) POrderClient {
	return &pOrderClient{cc}
}

func (c *pOrderClient) PlaceOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, POrder_PlaceOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOrderClient) CheckOrderStatus(ctx context.Context, in *OrderStatusRequest, opts ...grpc.CallOption) (*OrderStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderStatusResponse)
	err := c.cc.Invoke(ctx, POrder_CheckOrderStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOrderClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelOrderResponse)
	err := c.cc.Invoke(ctx, POrder_CancelOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// POrderServer is the server API for POrder service.
// All implementations must embed UnimplementedPOrderServer
// for forward compatibility.
type POrderServer interface {
	PlaceOrder(context.Context, *OrderRequest) (*OrderResponse, error)
	CheckOrderStatus(context.Context, *OrderStatusRequest) (*OrderStatusResponse, error)
	CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error)
	mustEmbedUnimplementedPOrderServer()
}

// UnimplementedPOrderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPOrderServer struct{}

func (UnimplementedPOrderServer) PlaceOrder(context.Context, *OrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrder not implemented")
}
func (UnimplementedPOrderServer) CheckOrderStatus(context.Context, *OrderStatusRequest) (*OrderStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOrderStatus not implemented")
}
func (UnimplementedPOrderServer) CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedPOrderServer) mustEmbedUnimplementedPOrderServer() {}
func (UnimplementedPOrderServer) testEmbeddedByValue()                {}

// UnsafePOrderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to POrderServer will
// result in compilation errors.
type UnsafePOrderServer interface {
	mustEmbedUnimplementedPOrderServer()
}

func RegisterPOrderServer(s grpc.ServiceRegistrar, srv POrderServer) {
	// If the following call pancis, it indicates UnimplementedPOrderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&POrder_ServiceDesc, srv)
}

func _POrder_PlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POrderServer).PlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POrder_PlaceOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POrderServer).PlaceOrder(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POrder_CheckOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POrderServer).CheckOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POrder_CheckOrderStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POrderServer).CheckOrderStatus(ctx, req.(*OrderStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POrder_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POrderServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POrder_CancelOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POrderServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// POrder_ServiceDesc is the grpc.ServiceDesc for POrder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var POrder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pizza_order.POrder",
	HandlerType: (*POrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaceOrder",
			Handler:    _POrder_PlaceOrder_Handler,
		},
		{
			MethodName: "CheckOrderStatus",
			Handler:    _POrder_CheckOrderStatus_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _POrder_CancelOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pizza-order/pizza-order.proto",
}
